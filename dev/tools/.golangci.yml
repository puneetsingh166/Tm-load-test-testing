# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # default concurrency is a available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  # build-tags:

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  skip-dirs:
    - docs
    - vendor

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  # skip-files:
  #  - ".*\\.my\\.go$"
  #  - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|vendor|mod

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  # allow-parallel-runners: false


# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  # default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  uniq-by-line: true

  # add a prefix to the output file references; default is no prefix
  path-prefix: ""

  # sorts results by: filepath, line and column
  sort-results: false


# all available settings of specific linters
linters-settings:
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 200

  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors. See the readme for caveats
    errorf: true
    # Check for plain type assertions and type switches
    # asserts: true
    # Check for plain error comparisons
    # comparison: true

  exhaustive:
    # check switch statements in generated files also
    check-generated: false
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch
    default-signifies-exhaustive: false

  funlen:
    lines: 200
    statements: 100

  gci:
    # put imports beginning with prefix after 3rd-party packages;
    # only support one prefix
    # if not set, use goimports.local-prefixes
    local-prefixes: github.com/onomyprotocol

  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 15

  nestif:
    # minimal complexity of if statements to report, 5 by default
    min-complexity: 3

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimum occurrences of constant string count to trigger issue, 3 by default
    min-occurrences: 3
    # ignore test files, false by default
    # ignore-tests: false
    # look for existing constants matching the values, true by default
    # match-constant: true
    # search also for duplicated numbers, false by default
    # numbers: false
    # minimum value, only works with goconst.numbers, 3 by default
    # min: 3
    # maximum value, only works with goconst.numbers, 3 by default
    # max: 3
    # ignore when constant is not used as function argument, true by default
    # ignore-calls: true

    #  gocritic:
    #    # Which checks should be enabled; can't be combined with 'disabled-checks';
    #    # See https://go-critic.github.io/overview#checks-overview
    #    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    #    # By default list of stable checks is used.
    #    enabled-checks:
    #      - rangeValCopy
    #
    #    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    #    disabled-checks:
    #      - regexpMust
    #
    #    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    #    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    #    enabled-tags:
    #      - performance
    #    disabled-tags:
    #      - experimental
    #
    #    # Settings passed to gocritic.
    #    # The settings key is the name of a supported gocritic checker.
    #    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    #    settings:
    #      captLocal: # must be valid enabled check name
    #        # whether to restrict checker to params only (default true)
    #        paramsOnly: true
    #      elseif:
    #        # whether to skip balanced if-else pairs (default true)
    #        skipBalanced: true
    #      hugeParam:
    #        # size in bytes that makes the warning trigger (default 80)
    #        sizeThreshold: 80
    #      nestingReduce:
    #        # min number of statements inside a branch to trigger a warning (default 5)
    #        bodyWidth: 5
    #      rangeExprCopy:
    #        # size in bytes that makes the warning trigger (default 512)
    #        sizeThreshold: 512
    #        # whether to check test functions (default true)
    #        skipTestFuncs: true
    #      rangeValCopy:
    #        # size in bytes that makes the warning trigger (default 128)
    #        sizeThreshold: 32
    #        # whether to check test functions (default true)
    #        skipTestFuncs: true
    #      ruleguard:
    #        # path to a gorules file for the ruleguard checker
    #        rules: ''
    #      truncateCmp:
    #        # whether to skip int/uint/uintptr types (default true)
    #        skipArchDependent: true
    #      underef:
    #        # whether to skip (*x).method() calls where x is a pointer receiver (default true)
    #        skipRecvDeref: true
    #      unnamedResult:
    #        # whether to check exported functions
    #        checkExported: true

  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10

  godot:
    # comments to be checked: `declarations`, `toplevel`, or `all`
    scope: all
    # check all top-level comments, not only declarations
    check-all: true
    # check that each sentence starts with a capital letter
    capital: false

  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true

  gofumpt:
    extra-rules: true

  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/onomyprotocol

  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8

  gomnd:
    settings:
      mnd:
        # the list of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
        checks: argument,case,condition,operation,return,assign
        # ignored-numbers: 1000
        # ignored-files: magic_.*.go
        # ignored-functions: math.*

  govet:
    # report about shadowed variables
    check-shadowing: true
    disable:
      - fieldalignment # produces a lot of warnings which are not topical at the moment
    # settings per analyzer
    settings:
      shadow:
        strict: true
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
    enable-all: true

  depguard:
    list-type: blacklist
    include-go-root: false
    packages:
      - github.com/sirupsen/logrus
    packages-with-error-message:
      # specify an error message to output when a blacklisted package is used
      - github.com/sirupsen/logrus: "logging is allowed only by logutils.Log"

  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 250
    # tab width in spaces. Default to 1.
    tab-width: 4

  makezero:
    # Allow only slices initialized with a length of zero. Default is false.
    always: false

  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - someword

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 40

  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: false
    range-loops: false # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

  nolintlint:
    # Enable to ensure that nolint directives are all used. Default is true.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space. Default is true.
    allow-leading-space: true
    # Exclude following linters from requiring an explanation.  Default is [].
    allow-no-explanation: []
    # Enable to require an explanation of nonzero length after each nolint directive. Default is false.
    require-explanation: false
    # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.
    require-specific: true

  rowserrcheck:
    packages:
      - github.com/jmoiron/sqlx

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: true

  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

linters:
  enable-all: true
  disable:
    - exhaustivestruct
    - prealloc
    - paralleltest
    - gas
    - goerr113
    - goheader
    - golint
    - gomoddirectives
    - gomodguard
    - interfacer
    - maligned
    - nlreturn
    - testpackage
    - tparallel
    - wrapcheck
    - wsl

issues:
  exclude-use-default: false
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0
  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
  exclude-rules: # Excluding configuration per-path, per-linter, per-text and per-source
    - linters:
        - govet
      text: 'declaration of "err" shadows declaration at line'
    - linters: # Exclude lll issues for long lines with go:generate
        - lll
      source: "^//go:generate "
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - noctx
        - gocognit